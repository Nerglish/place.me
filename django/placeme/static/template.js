/**
 * classes of importance to this javascript file
 * 		tmpl-cont		- an element which contains a jquery template
 * 			Required attributes:
 * 				- objPath: the object to load into this template, based on the global javascript path
 * 			Optional attributes:
 * 				- filterFunction: a preprocessing function for input template data
 * 				- addIndex: if set to true, the variable "index" is added to each iterable object
 * 		redrawable		- a templated element which is generated by data and redrawn when necessary
 * 		ignored			- element which the template system ignores altogether
 */
var Template = {};

Template.redraw = function() {
	$(".tmpl-cont").each(function() {
		var objPath = $(this).attr("objPath");
		var filterFuncPath = $(this).attr("filterFunction");
		var addIndex = $(this).attr("addIndex");
		
		if (objPath == null) return;
		
		// path to data object in sctqResults
		var tmplData = Template.dereferenceObj(window,objPath);
		
		if (tmplData == null) return;
		
		if (addIndex == "true") {
			tmplData = Template.addIndex(tmplData);
		}
		
		if (filterFuncPath != null) {
			var filterFunc = Template.dereferenceObj(window,filterFuncPath);
			if (filterFunc != null) {
				tmplData = filterFunc(tmplData);
			}
		}
		
		// pull out templates, kill the redrawable parts
		var tmpls = [];
		$(this).children().each(function() {
			if ($(this).hasClass("redrawable")) {
				$(this).remove();
			} else if ($(this).hasClass("ignored")) {
				// derp - this functionality needs some working out
				// in particular, order is screwed up with an ordered element
			} else {
				tmpls.push($(this));
			}
		});
		
		// draw templates (is there a better way to report array indeces?)
		for (var i = 0; i < tmpls.length; i++) {
			tmpls[i].tmpl(tmplData,
				{
					dataArrayIndex: function(item) {return $.inArray(item, tmplData);}
				}
			).appendTo($(this));
		}
	});
	$(document).trigger("after-redraw.template");
}

Template.addIndex = function(a) {
	for (var i = 0; i < a.length; i++) {
		a[i].index = i;
	}
	return a;
}

Template.dereferenceObj = function(baseObj,path) {
	if (baseObj == null) return null;
	pathArr = path.split(".");
	var d = baseObj;
	for (var i = 0; i < pathArr.length; i++) {
		d = d[pathArr[i]];
		if (d == null) return null;
	}
	return d;
}
